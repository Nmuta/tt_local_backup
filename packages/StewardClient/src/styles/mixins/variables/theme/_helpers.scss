@use 'sass:map';
@use '@angular/material' as mat;
@import './_palettes.scss';

/// Produces an "r, g, b" string for embedding in a CSS var
@function toRGB($color) {
  @return red($color) + ', ' + green($color) + ', ' + blue($color);
}

/// Produces an "r, g, b, a" string for embedding in a CSS var
@function toRGBA($color) {
  @return red($color) + ', ' + green($color) + ', ' + blue($color) + ', ' + alpha($color);
}

/// Produces CSS vars for a given color
/// --hex-name: hexcode
/// --rgb-name: r, g, b
/// --rgba-name: r, g, b, a
@mixin colorToVars($name, $color) {
  --hex-#{$name}: #{$color};
  --rgb-#{$name}: #{toRGB($color)};
  --rgba-#{$name}: #{toRGBA($color)};
}

/// Determines the CSS var-name suffix for the given palette+style
@function makeLookupName($palette-name, $style) {
  @return $palette-name + '-' + $style;
}

/// Produces the CSS vars, given color + darkmode + palette + style-names
@mixin paletteEntryToVars($palette, $is-dark, $palette-name, $style, $darkmode-style-name) {
  $source-style: $style;
  $lookup-name: makeLookupName($palette-name, $style);
  @if ($is-dark) {
    $source-style: $darkmode-style-name;
  }

  $color: mat.get-color-from-palette($palette, $source-style);
  @include colorToVars($lookup-name, $color);
}

/// Produces the CSS vars, given color + darkmode + palette + style-names
@mixin themePaletteToVars($color-config, $is-dark, $palette-name) {
  $palette: map.get($color-config, $palette-name);

  @include paletteToVars($palette, $is-dark, $palette-name);
}

/// Produces the CSS vars, given color + darkmode + palette
@mixin paletteToVars($palette, $is-dark, $palette-name) {
  // original colors. inverts darker/lighter between darkmode/lightmode
  @include paletteEntryToVars(
    $palette,
    $is-dark,
    $palette-name,
    'default-contrast',
    'default-contrast'
  );
  @include paletteEntryToVars(
    $palette,
    $is-dark,
    $palette-name,
    'lighter-contrast',
    'darker-contrast'
  );
  @include paletteEntryToVars(
    $palette,
    $is-dark,
    $palette-name,
    'darker-contrast',
    'lighter-contrast'
  );
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'default', 'default');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'lighter', 'darker');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'darker', 'lighter');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'text', 'text');

  // passthru colors
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 50, 50);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 100, 100);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 200, 200);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 300, 300);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 400, 400);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 500, 500);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 600, 600);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 700, 700);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 800, 800);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 900, 900);
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A100', 'A100');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A200', 'A200');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A400', 'A400');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A700', 'A700');

  // passthru colors (contrast)
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '50-contrast', '50-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '100-contrast', '100-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '200-contrast', '200-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '300-contrast', '300-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '400-contrast', '400-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '500-contrast', '500-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '600-contrast', '600-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '700-contrast', '700-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '800-contrast', '800-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, '900-contrast', '900-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A100-contrast', 'A100-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A200-contrast', 'A200-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A400-contrast', 'A400-contrast');
  @include paletteEntryToVars($palette, $is-dark, $palette-name, 'A700-contrast', 'A700-contrast');
}

// Produces CSS vars for a given color-config
@mixin colorConfigToVars($color-config, $is-dark) {
  @include themePaletteToVars($color-config, $is-dark, 'primary');
  @include themePaletteToVars($color-config, $is-dark, 'accent');
  @include themePaletteToVars($color-config, $is-dark, 'warn');

  // angular themes are limited to three colors, but we use more. This should work, but the color is the same between dark and light themes.
  @include paletteToVars($app-success, $is-dark, 'success');
}

// Produces the CSS vars for a given foreground/background palette combination
@mixin themePalettesToVars(
  $theme-foreground-palette,
  $theme-background-palette,
  $lighten-operator,
  $darken-operator
) {
  $secondary-text-color: map.get($theme-foreground-palette, 'secondary-text');

  // special vars
  --#{makeLookupName('foreground', 'secondary-text-opacity')}: #{alpha($secondary-text-color)};

  // foreground-based vars
  @include colorToVars(makeLookupName('foreground', 'secondary-text'), $secondary-text-color);
  @include colorToVars(
    makeLookupName('background', 'default-contrast'),
    map-get($theme-foreground-palette, 'base')
  );
  @include colorToVars(
    makeLookupName('background', 'default-contrast'),
    map-get($theme-foreground-palette, 'base')
  );
  @include colorToVars(
    makeLookupName('background', 'lighter-contrast'),
    adjustColor($lighten-operator, map-get($theme-foreground-palette, 'base'), 20%)
  );
  @include colorToVars(
    makeLookupName('background', 'darker-contrast'),
    adjustColor($darken-operator, map-get($theme-foreground-palette, 'base'), 20%)
  );
  @include colorToVars(
    makeLookupName('background', 'text-contrast'),
    map-get($theme-foreground-palette, 'base')
  );
  @include colorToVars(
    makeLookupName('foreground', 'disabled-text'),
    map-get($theme-foreground-palette, 'disabled-text')
  );

  // background-based vars
  @include colorToVars(
    makeLookupName('background', 'default'),
    map-get($theme-background-palette, 'background')
  );
  @include colorToVars(
    makeLookupName('background', 'lighter'),
    adjustColor($lighten-operator, map-get($theme-background-palette, 'background'), 20%)
  );
  @include colorToVars(
    makeLookupName('background', 'darker'),
    adjustColor($darken-operator, map-get($theme-background-palette, 'background'), 20%)
  );
  @include colorToVars(
    makeLookupName('background', 'text'),
    map-get($theme-background-palette, 'background')
  );
  @include colorToVars(
    makeLookupName('background', 'card'),
    map-get($theme-background-palette, 'card')
  );
}

/// Applies the provided $operator to the provided $color, with $percentage as the second param
/// Supports 'lighten' and 'darken'
@function adjustColor($operator, $color, $percentage) {
  @if ($operator == 'lighten') {
    @return lighten($color, $percentage);
  } @else if ($operator == 'darken') {
    @return darken($color, $percentage);
  } @else {
    @error 'Unsupported operator. Use `lighten` or `darken`.';
  }
}

/// Converts a palette into a string used by CSS vars
@function paletteToString($palette) {
  @if ($palette == $app-primary) {
    @return 'primary';
  } @else if ($palette == $app-accent) {
    @return 'accent';
  } @else if ($palette == $app-success) {
    @return 'success';
  } @else if ($palette == $app-warn) {
    @return 'warn';
  } @else if ($palette == $app-background) {
    @return 'background';
  } @else if ($palette == $app-foreground) {
    @return 'foreground';
  } @else {
    @debug 'Unrecognized Palette: ' $palette;
    @debug 'unrecognized pallet would have produced "unknown"';
    @return 'unknown';
  }
}

// if a number, returns the number
// if a string, returns the valid mapped value
// in all other cases, errors
@function namedOpacityVarOrValue($opacity) {
  @if (type-of($opacity) == 'number') {
    // all numbers are considered valid
    @return $opacity;
  } @else if (type-of($opacity) == 'string') {
    // if it's a string, it must be on this list to be valid
    @if ($opacity == 'secondary-text') {
      @return var(--#{makeLookupName('foreground', 'secondary-text-opacity')});
    }
  }

  // all other values are illegal
  @error 'namedOpacityOrValue was given unrecognized value "#{$opacity}';
}
